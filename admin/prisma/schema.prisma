generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String       @id @default(cuid())
  name        String
  userId      String
  products    Product[]    @relation("StoreToProduct")
  categories  Category[]   @relation("StoreToCategory")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  staticPages StaticPage[] @relation("StoreToStaticPage")
  blogs       Blog[]       @relation("StoreToBlog")
  User        User         @relation(fields: [userId], references: [id])
}

model StaticPage {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String   @db.VarChar(10000)
  storeId   String
  store     Store    @relation("StoreToStaticPage", fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Blog {
  id        String      @id @default(uuid())
  title     String
  slug      String      @unique
  content   String      @db.VarChar(10000)
  storeId   String
  createdBy String
  category  String
  images    BlogImage[]
  store     Store       @relation("StoreToBlog", fields: [storeId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String     @id @default(uuid())
  storeId     String
  categoryId  String
  store       Store      @relation("StoreToProduct", fields: [storeId], references: [id])
  category    Category   @relation("CategoryToProduct", fields: [categoryId], references: [id])
  quantity    Int        @default(0)
  name        String
  slug        String
  description String     @db.VarChar(1000)
  price       Decimal
  isFeatured  Boolean    @default(false)
  isArchived  Boolean    @default(false)
  images      Image[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Wishlist    Wishlist[]

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model BlogImage {
  id        String   @id @default(uuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products  Product[] @relation("CategoryToProduct")
  slug      String
  storeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  first_name String
  last_name  String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Wishlist   Wishlist[]
  Store      Store[]
}
